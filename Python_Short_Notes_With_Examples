# Python
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
import pandas as pd
import numpy as np

# Case-sensitivity: Except True, False and None, all keywords are in lowercare.

# Single Comment

""" Multiline string comments 
But they can be used as a multi-line comment as well.
Docstrings appear right after the definition of a function, method, class, or module.
"""
def tripple(num):
    """Here goes docstring... Function to triple the value"""
    return num * 3

# A code block starts with indentation (generally 4 spaces) and ends with the first unindented line. 

# Assign variables
x, y, z = 1, 2.5, "love"
print(x, y, z)

# A constant is a type of variable whose value cannot be changed

# Declare and assign them on the main.py or or create a file, say const.py and refer to it in main.py
g = 981
x = const.g

# Literal is a raw data given in a variable or constant. Types: Numeric. String, Boolian. Special.

# 4 different literal collections. List, Tuple, Set and Dict.
my_list  = [1, 2.5, 'love']              # list
my_tuple = (1, 2.5, 'love')              # tuple
my_set   = {1, 2.5, 'love'}              # set
my_dict  = {'x':1, 'y':2.5, 'z':'love'}  # dictionary

# Everything is an object. Data types are classes. Variables are instance (object) of classes.

# Which class does a variable or values belong to? Use type().
# How to check if an object belongs to a particular class? Use isinstance().
type(my_list)
type(my_list[1])
isinstance(my_list, list)
isinstance(my_list[1], float)

# Type conversion. 
# Implicit. Auto converts lower to higher data type to avoid data loss. Ex integer to float.
# Explicit. But in other cases, it needs explicit conversion. Also called Type Conversion.
num_str = '123'
num_int = int(num_str)

# Accept input
num = input('Enter a number: ', )

# Arithmetic Operators
+ - * / 
% (modulus) 
// (floor division)
** exponent

# Comparison Operators
<  >  == != >= <=

# Logical Operators
and
or
not

# Bitwise Operator
& is AND
| is OR
- is NOT
^ is XOR
>> is RIGHT SHIFT
<< is LEFT SHIFT

# Asignment Operator
= += -+ *= /+ etc

# Special Operators : Identity
is
is not

# Special Operators : Membership
in     not in

# Namespace

# Flow Control - if else

if <test condition> :
    do this
elif <test condition> :
    do this
else:
    do this
   
def sign_of_a_num(x):
    if (x > 0):
        print ('x is positive ', x)
    elif (x < 0):
        print ('x is negative ', x)
    else:
        print ('x is zero ', x)
        
sign_of_a_num (5)
sign_of_a_num (-11)
sign_of_a_num (0)

# Flow Control - for loop
my_list = [0.1.2.3.4]
sum = 0
for x in my_list:
    sum = sum + x
print (sum)

# Functions - range arange
range(10)
range(0,10)
list(range(0,10)
range(3,10)
range(2,10,3)
list(range(2,10,3))

arange(3*5).reshapce(3,5)
arange(3*5).reshapce(5,3)

# Flow Control - for loop with elsenum = list(range(0,5))
num = list(range(0,10))
for i in num:
    print(i)
else:
    print('end of num list... no more num to print')

# Flow Control - while loop and while loop with else
num = list(range(0,10))
i = 0
while (i < 5):
    print(i)
    i = i + 1
else:
    print('came out of while condition...')


        print ('x

# Flow Control - break, continue, pass
num = list(range(0,10))
for i in num:
    if (i < 3):
        print('hit continue since counter value is ', i)
        continue
    if (i == 8):
        print('now loop will break since counter value is ', i)
        break
    print('*** printing counter since it is ', i)
print('finally, came out of loop')

num = list(range(0,10))
for i in num:
    pass
print('hit a pass, so nothing to do here, came out of loop')

#----------------------------------------------------
""" Datatypes ...
begin here...

Number
String
List
Tuple
Set
Dictionaty
"""
#----------------------------------------------------
# Datatypes : Number - int, float, complex

int(-2.3)          # output -2
float(5)           # output 5.0
complex('1+2j')    # output 1+2j
complex(1+2j)      # output 1+2j
# binary
0b1000             # 10
# octal
0o11               # 10 
# hexadecimal
0x0F               # 15

# Datatypes :  Number - Decimal
1.1 + 2.2 == 3.3 turn out to be False

import decimal as dc
print(dc.Decimal(0.1)) 
# or equivalently
from decimal import Decimal as D
print(D(0.1))    # output 0.1000000000000000055511151231257827021181583404541015625

from decimal import Decimal as D
print( D('1.1') + D('2.2') )    # output 3.3
# use decimal over flot when we want to control level of precisions, ex. financial calc etc

# Datatypes :  Number - Fraction
from fractions import Fraction as F
print ( F(1.5))
 
# Datatypes : Number - Python Math

import math
math.cos(math.pi/3)      # 0.5...
math.tan(math.pi/4)      # 0.9999.... ( = 1 ) 
math.exp(1)              # 2.718...
math.log(math.exp(1))    # 1.0
math.log10(100)          # 2.0
math.factorial(4)        # 120


# Datatypes : Number -  Function - random
import random
random.randrange(1,1000)
random.randint(1,1000)
random.random()       # get a random number

x = list(range(0,10))
random.choise(x)      # random element from list is chosen
random.shuffle(x)     # the list x is shuffled and ordered randomly
print(x)              # see it happens

#----------------------------------------------------
# Datatypes : String
"""
immutable - characters cannot be changed once assigned
charactesr cannot be deleted or removed

"""

my_string = 'Python Program'
s = my_string
s[0]             # P
s[-1]            # g
s[7:11]          # Prog
s[7:-3]          # Program

'P' in s             # True
'Prog' not in s      # Fales
list(enumerate(s)    # see results. returns index and character as value
len(s)               # 18 = num of chars in string

# escape char 
print ('''He said "what's going on?" ''') 
print ('He said \"what\'s going on?\" ') 

# Format
default_seq    = '{}, {}, {}'.format('a', 'b', 'c')       # a, b, c
positional_seq = '{2}, {0}, {1}'.format('a', 'b', 'c')    # c, a, b
key_seq        = '{z}, {x}, {y}'.format(x = 'a', y = 'b', z = 'c')    # c, a, b

'{0} --> {0:b}'.format(10)       # 10 --> 1010                binary
'{0} --> {0:o}'.format(10)       # 10 --> 12                  octal
'{0} --> {0:x}'.format(15)       # 15 --> f                   hexadecimal
'{0} --> {0:e}'.format(132.5)    # 132.5 --> 1.325e+2         exponential

s.lower()    
s.upper()

#-----------------------------------------------
# Collection Datatypes 1: List
# Ordered. Changeable. Allows duplicates.

my_list = []                         # empty list
my_list = [1, 2.5, 'love']           # list with mixed data types
my_list = ['a', [1, 2, 3], ['happy'] ]          # nested list

# Indexes
my_list = list(range(0,10))
print(my_list)                     # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
l = my_list    
print( l[0] )                              # 0
print( l[2] )                              # 2
print( l[:2] )                             # [0, 1]
print( l[2:] )                             # [2, 3, 4, 5, 6, 7, 8, 9]
print( l[2:5] )                            # [2, 3, 4]
print( l[-1] )                             # 9
print( l[-4:-1] )                          # [6, 7, 8]
print( l[4:-1] )                           # [4, 5, 6, 7, 8]

l1 =  list(range(0,4)) 
print ('create l1  --> ', l1 )                   # create l1  -->  [0, 1, 2, 3]
l2 =  list(range(10,12)) 
print ('create l2  --> ', l2 )                   # create l2  -->  [10, 11]
l = []
l.insert(0,l2)  
l.insert(0,l1) 
print('inserted   --> ', l)                      # inserted   -->  [[0, 1, 2, 3], [10, 11]]
print('slice 0:1  --> ', l[0:1] )                # slice 0:1  -->  [[0, 1, 2, 3]]
print('access 0,1 --> ', l[0][1] )               # access 0,1 -->  1
del l[0][2]
print('del 0,2    --> ', l)                      # del 0,2    -->  [[0, 1, 3], [10, 11]]
del l[0][0:2]
print('del 0,0:2  --> ', l)                      # del 0,0:2  -->  [[3], [10, 11]]
l.append(99)
print('append itm --> ', l)                      # [[3], [10, 11], 99]
l.extend([50,51,52])
print('extend itm --> ', l)                      # extend itm -->  [[3], [10, 11], 99, 50, 51, 52]
l.remove(51)
print('remove     --> ', l)                      # remove     -->  [[3], [10, 11], 99, 50, 52]
l.pop(1)
print('pop last   --> ', l)                      # pop last   -->  [[3], 99, 50, 52]
l.reverse()
print('reverse    --> ', l)                      # reverse    -->  [52, 50, 99, [3]]
l.pop()
print('pop indx 1 --> ', l)                      # pop indx 1 -->  [52, 50, 99]
l.sort(reverse=False)
print('sort asc   --> ', l)                      # sort asc   -->  [50, 52, 99]
l.sort(reverse=True)
print('sort desc  --> ', l)                      # sort desc  -->  [99, 52, 50]
l.clear()
print('clear list --> ', l)                      # clear list -->  []

# count , index
l1 = list(range(0,4))  
print(l1)                # [0, 1, 2, 3]
print( l1.count(1) )     # 1
print( l1.index(1) )     # 1
l2 = list(range(10,14))
lst = []
lst.insert(0,l1)
lst.insert(1,l2)
print(lst)                 # [[0, 1, 2, 3], [10, 11, 12, 13]]
print( [(i, x.index(1)) for i, x in enumerate(lst) if 1 in x] )    # [(0, 1)]


#-----------------------------------------------

# Collection Datatypes 2: Tuple
# Ordered. Unchangeable - cannot add, change, delete items. Allows duplicates.
"""
Similar to list. But Immutable.
However, we cannot change elements once assigned in a tuple unlike a list
But if an element itslef is of a mutable datatype such as a list, the nested elements can be changes
Since immutable, iterating through tuple is slight;y faster than list.
Since immutable, elements can be used as keys for dictionaries.
For data that should not change - should use tuple for write-protection.
Generally, tuples are used for heterogeneous data. For homogenous data, use list.
"""
my_tuple = ()                         # empty tuple
my_tuple = (1, 2.5, 'love')           # tuple with mixed data types
my_tuple = ('a', [1, 2, 3], ['happy'] )          # nested tuple

# Indexes
my_tuple = tuple(range(0,10))
print(my_tuple)                     # (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
t = my_tuple    
print( t[0] )                              # 0
print( t[2] )                              # 2
print( t[:2] )                             # (0, 1)
print( t[2:] )                             # (2, 3, 4, 5, 6, 7, 8, 9)
print( t[2:5] )                            # (2, 3, 4)
print( t[-1] )                             # 9
print( t[-4:-1] )                          # (6, 7, 8)
print( t[4:-1] )                           # (4, 5, 6, 7, 8)

t1 =  tuple(range(0,4)) 
print ('create t1  --> ', t1 )                   # create t1  -->  (0, 1, 2, 3)
t2 =  tuple(range(10,12)) 
print ('create t2  --> ', t2 )                   # create t2  -->  (10, 11)

# operator +
t = t1 + t2
print ( t )                                      # (0, 1, 2, 3, 10, 11)

# operator *
t = t1 * 2
print ( t )                                      # (0, 1, 2, 3, 0, 1, 2, 3)

# reassignment in its entirity
tuple_reassign =  tuple(range(0,4)) 
print ( tuple_reassign )                   # (0, 1, 2, 3)
tuple_reassign =  tuple(range(10,12)) 
print ( tuple_reassign )                   # (10, 11)

# membership test
t =  tuple(range(0,4)) 
print ( t )                       # (0, 1, 2, 3)
print ( 2 in t )                  # True
print ( 100 in t )                # False

# put 2 tuples into list and then convert back to tuple
my_list = []
my_list.insert(0,t2)  
my_list.insert(0,t1)

# now convert back to tuple
my_tuple = tuple(my_list)
t = my_tuple
print('converted  --> ', t)                 # converted -->  ((0, 1, 2, 3), (10, 11))
print('slice 0    --> ', t[0] )             # slice 0  -->  (0, 1, 2, 3)
print('access 0,1 --> ', t[0][1] )          # access 0,1 -->  1
del t                                       # delete entire tuple. rem: cannot delete elements

# count , index
t = tuple(range(0,4))  
print(t)                # (0, 1, 2, 3)
print( t.count(1) )     # 1
print( t.index(1) )     # 1

t =  tuple(range(0,4)) 
print ( t )                       # (0, 1, 2, 3)

# iteration through tuple
for x in t:
    print('element ', x)
"""
element  0
element  1
element  2
element  3
"""

#-----------------------------------------------
# Collection Datatypes 3: Set
# Unordered. Unchangeable - Cannot change, but can remove and add new items. Unique. Unindexed, 

# set can contain different data types as its items. 
my_set = {1, 2.5, 'love', (4,5)}
print(my_set)                # {'love', 1, 2.5, (4, 5)}

# does not allow mutable data types as its items. eg. list not allowed. 
set_not_allow_mutable_data_type_as_list = {1, 2.5, 'love', [4,5]}
print(set_not_allow_mutable_data_type_as_list)  # TypeError: unhashable type: 'list'

# creat an empty set
my_set = {}
print ( type(my_set) )   # <class 'dict'>
my_set = set()
print ( type(my_set) )   # <class 'set'>

# add
my_set = {1, 2, 3}
my_set.add(4)
print ( my_set )      # {1, 2, 3, 4}

# update - will forgive dupes
my_set.update([5])
print ( my_set )      # {1, 2, 3, 4, 5}
my_set.update([6, 7], (8, 9), {0, 'a'})
print ( my_set )      # {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a'}

# discard
my_set.discard(0)
print ( my_set )      # {1, 2, 3, 4, 5, 6, 7, 8, 9, 'a'}

# remove
my_set.remove(1)
print ( my_set )      # {2, 3, 4, 5, 6, 7, 8, 9, 'a'}

# diff betn discard (no issues if non-existent item) and remove (error if non-existent)
my_set.discard(0)
print ( my_set )      # {2, 3, 4, 5, 6, 7, 8, 9, 'a'}
my_set.remove(1)      # KeyError: 1 . b/c item does not exist and using remove.

# pop - it will remove n item and will display which one it has been removed. BUT it is arbitrary
x = my_set.pop()
print ( x )           # 1 

# clear ---------------------------
A = {1, 2 ,3}
print( A )                # {1, 2, 3}
A.clear()
print( A )                # set()

# Mathematical SET Operations
# Union -------------------- all items from both sets
A = {1, 2 ,3}
B = {3, 4, 5}

# using |
AB = A | B
print( AB )                # {1, 2, 3, 4, 5}

# using union
AB = A.union(B)
print( AB )                # {1, 2, 3, 4, 5}

# if you want to update one set with the resultant union
A.update(B)
print( A )                 # {1, 2, 3, 4, 5}

# Intersection -------------------- common items from both sets
A = {1, 2 ,3}
B = {3, 4, 5}

# using &
AB = A & B
print( AB )                 # {3}

# using intersection
AB = A.intersection(B)
print( AB )                 # {3}

# if you want to update one set with the resultant intersection
A.intersection_update(B)
print( A )                  # {3}

# Difference -------------------- items in first set but not in second 
A = {1, 2 ,3}
B = {3, 4, 5}

# using -
AB = A - B
print( AB )                 # {1, 2}

# using difference
AB = A.difference(B)
print( AB )                 # {1, 2}

# if you want to update one set with the resultant difference
A.difference_update(B)
print( A )                  # {1, 2}

# Symmetric Difference -------------------- items not in both sets. eliminates common items
A = {1, 2 ,3}
B = {3, 4, 5}

# using ^
AB = A ^ B
print( AB )                 # {1, 2, 4, 5}

# using symmetric_difference
AB = A.symmetric_difference(B)
print( AB )                 # {1, 2, 4, 5}

# if you want to update one set with the resultant symmetric difference
A.symmetric_difference_update(B)
print( A )                  # {1, 2, 4, 5} = A

# isdisjoint -------------------- True if no common items. True if no interection exists.
A = {1, 2 ,3}
B = {3, 4, 5}
C = {7, 8, 9}

X = A.isdisjoint(B)
print ( X )         # False
Y = A.isdisjoint(C)
print ( Y )         # True

# issubset -------------------- True if all ietms in one set A is present in the other set B. A is subset of B
A = {1, 2 }
B = {1, 2, 3}
C = {7, 8, 9}

X = A.issubset(B)
print ( X )         # True
Y = A.issubset(C)
print ( Y )         # False

# issuperset -------------------- True if one set A contains all ietms from the other set B. A is superset of B
A = {1, 2, 3}
B = {1, 2}
C = {7, 8, 9}

X = A.issuperset(B)
print ( X )         # True
Y = A.issuperset(C)
print ( Y )         # False


#-----------------------------------------------
# Collection Datatypes 4: Dictionary
# Unordered. Mutable (changeable). Unique.


"""
Collection Datatypes Key Properties:
                   List            Tuple           Set             Dictionary
Ordered    ?       Yes             Yes             No              No
Indexed    ?       Yes             Yes             No              No
Changeable ?       Yes             No              No              Yes
Unique     ?       No              No              Yes             Yes

"""
